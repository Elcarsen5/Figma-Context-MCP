#!/usr/bin/env node

import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { config as loadEnv } from "dotenv"; // ‚úÖ dotenv Ïù¥Î¶Ñ Ï∂©Îèå Î∞©ÏßÄ
import { resolve } from "path";
import { getServerConfig } from "./config.js";
import { FigmaMcpServer } from "./server.js";

// ‚úÖ Load .env file from working directory
loadEnv({ path: resolve(process.cwd(), ".env") });

export async function startServer(): Promise<void> {
  // ‚úÖ Check CLI vs HTTP
  const isStdioMode = process.env.NODE_ENV === "cli" || process.argv.includes("--stdio");

  // ‚úÖ getServerConfig safely (no variable shadowing)
  const serverConfig = getServerConfig(isStdioMode);
  const server = new FigmaMcpServer(serverConfig.figmaApiKey);

  if (isStdioMode) {
    const transport = new StdioServerTransport();
    await server.connect(transport);
  } else {
    const port = Number(process.env.PORT) || serverConfig.port || 3333;

    // ‚úÖ ÌÖúÌîåÎ¶ø Î¶¨ÌÑ∞Îü¥ ÎèôÏûë ÌôïÏù∏Ïö© Î°úÍ∑∏
    console.log(`üü¢ Initializing Figma MCP Server on port ${port}`);
    console.log(`üîë FIGMA_API_KEY: ${serverConfig.figmaApiKey ? "[loaded]" : "[missing]"}`);
    console.log("üü¢ Ìò∏Ï∂ú ÏãúÏûë: startHttpServer()");
    await server.startHttpServer(port);
    console.log("üü¢ Ìò∏Ï∂ú ÏôÑÎ£å: startHttpServer()");
  }
}

// ‚úÖ Execute directly
if (process.argv[1] === new URL(import.meta.url).pathname) {
  startServer().catch((error) => {
    console.error("‚ùå Failed to start server:", error);
    process.exit(1);
  });
}
